using System;
using System.Linq;

ironmeta Parser<char, ASTNode> : IronMeta.Matcher.CharMatcher<ASTNode>
{
   SEMI = ';' SP;
   SP = (WS | Comment)*;
   WS = ' ' | '\n' | '\r' | '\t';
   BRA = '{';
   KET = '}';
   EOL = WT* (';' | '\n' | '\r') WT*;
   WT = (' ' | '\t');
   PLUS = '+';

   Comment = "//" (~('\r' '\n'? | '\n') .)* ('\r' '\n'? | '\n');
   Comment = "/*" (~"*/" .)* "*/";

   GccProgram = Node+:nodes -> { return new GccProgram(nodes.Results); };

   Node = (Return | Assignment | Declaration | Instruction | TIfStatement | IfStatement | Function | TFunctionCall | FunctionCall) EOL+;

   Constant = ['0'-'9']+:n -> { return new Constant(int.Parse(Input(n))); };

   Identifier = Ident:id -> { return id; };
   Ident = (IdentBegin IdentBody*):id -> { return new Identifier(Input(id)); };
   IdentBegin = '_' | . ?(System.Char.IsLetter(_IM_Result));
   IdentBody = '_' | . ?(System.Char.IsLetterOrDigit(_IM_Result));   

   Symbol = Constant | Identifier;

   LDC = "LDC" WT+ Constant:c -> { return new LDC((Constant)((ASTNode)c)); };

   LD = "LD" WT+ Constant:n WT+ Symbol:i -> { return new LD((Constant)((ASTNode)n), (Symbol)((ASTNode)i)); };
   ST = "ST" WT+ Constant:n WT+ Symbol:i -> { return new ST((Constant)((ASTNode)n), (Symbol)((ASTNode)i)); };

   ADD = "ADD" -> { return new ADD(); };
   SUB = "SUB" -> { return new SUB(); };
   MUL = "MUL" -> { return new MUL(); };
   DIV = "DIV" -> { return new DIV(); };

   CEQ = "CEQ" -> { return new CEQ(); };
   CGT = "CGT" -> { return new CGT(); };
   CGTE = "CGTE" -> { return new CGTE(); };

   ATOM = "ATOM" -> { return new ATOM(); };

   CONS = "CONS" -> { return new CONS(); };
   CAR = "CAR" -> { return new CAR(); };
   CDR = "CDR" -> { return new CDR(); };

   SEL = "SEL" WT+ Symbol:trueAddress WT+ Symbol:falseAddress -> { return new SEL((Symbol)((ASTNode)trueAddress), (Symbol)((ASTNode)falseAddress)); };
   JOIN = "JOIN" -> { return new JOIN(); };

   LDF = "LDF" WT+ Symbol:address -> { return new LDF((Symbol)((ASTNode)address)); };

   AP = "AP" WT+ Constant:n -> { return new AP((Constant)((ASTNode)n)); };
   RTN = "RTN" -> { return new RTN(); };

   DUM = "DUM" WT+ Constant:n -> { return new DUM((Constant)((ASTNode)n)); };
   RAP = "RAP" WT+ Constant:n -> { return new RAP((Constant)((ASTNode)n)); };
   
   STOP = "STOP" -> { return new STOP(); };

   TSEL = "TSEL" WT+ Symbol:trueAddress WT+ Symbol:falseAddress -> { return new TSEL((Symbol)((ASTNode)trueAddress), (Symbol)((ASTNode)falseAddress)); };
   TAP = "TAP" WT+ Constant:n -> { return new TAP((Constant)((ASTNode)n)); };
   TRAP = "TRAP" WT+ Constant:n -> { return new TRAP((Constant)((ASTNode)n)); };

   DBUG = "DBUG" -> { return new DBUG(); };
   BRK = "BRK" -> { return new BRK(); };

   Operator = "==" | "+" | "-" | "/" | "*" | "<" | "<=" | ">" | ">=";

   Declaration = "var" WT+ (WT* Ident ','?)*:names -> { return new Declaration(names.Results); };

   Assignment = Ident:name WT+ "=" WT+ Expression:e -> { return new Assignment(Input(name), (ASTNode)e); };

   Expression = OperatorExpression | PostfixOp | TFunctionCall | FunctionCall | Symbol;

   Instruction = WT* (LDC | LD | ST | ADD | SUB | MUL | DIV | CEQ | CGT | CGTE | ATOM | CONS | CAR | CDR | SEL | JOIN | LDF | AP | RTN | DUM | RAP | STOP | TSEL | TAP | TRAP | DBUG | BRK);

   Function = "function" WT+ Ident:name WT* "(" (WT* Ident ','?)*:parameters WT* ")" (WT | EOL)* BRA (WT | EOL)* Node*:nodes (WT | EOL)* KET -> { return new Function(Input(name), nodes.Results, parameters.Results.Cast<Identifier>()); };

   FunctionCall = Ident:name WT* "(" (WT* Expression ','?)*:parameters WT* ")" -> { return new FunctionCall(Input(name), parameters.Results); };
   TFunctionCall = '@'Ident:name WT* "(" (WT* Expression ','?)*:parameters WT* ")" -> { return new TFunctionCall(Input(name), parameters.Results); };

   OperatorExpression = "(" WS* Expression:l WS* Operator:op WS* Expression:r WS* ")" -> { return new OperatorExpression((ASTNode)l, Input(op), (ASTNode)r); };
   
   // does not work ParensExpression = "(" WS* Expression:l WS* Operator:op WS* Expression:r WS* ")" -> { return new OperatorExpression((ASTNode)l, Input(op), (ASTNode)r); };

   // IndexExpression = Ident:name '[' Expression:i ']' -> { return new IndexExpression(Input(name), i); };

   Block = (WT | EOL)* BRA (WT | EOL)* Node* (WT | EOL)* KET;

   IfStatement = "if" WT* '(' Expression:c ')' Block:trueNodes ((WT | EOL)* "else" Block)?:falseNodes -> { return new IfStatement(c, trueNodes.Results, falseNodes.Results); };
   TIfStatement = "@if" WT* '(' Expression:c ')' Block:trueNodes ((WT | EOL)* "else" Block)?:falseNodes -> { return new IfStatement(c, trueNodes.Results, falseNodes.Results, true); };

   Return = "return" ((WT+ | (WT* ',' WT*)) Expression)*:parameters -> { return new Return(parameters.Results); };

   PostfixOperator = "<<" | ">>" | "^";
   PostfixOp = Expression:e PostfixOperator:op -> { return new PostfixOp(e, Input(op)); };
}